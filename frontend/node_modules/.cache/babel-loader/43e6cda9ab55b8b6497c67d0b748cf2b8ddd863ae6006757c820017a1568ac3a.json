{"ast":null,"code":"var _s = $RefreshSig$();\nimport QRCodeStyling from \"qr-code-styling\";\nimport { useEffect, useState } from \"react\";\nexport const useQrCode = options => {\n  _s();\n  const {\n    text = \"\",\n    ref,\n    refetch\n  } = options;\n  const textLength = text.length;\n  const maxLengthForLMode = 271;\n  const textSupportsLMode = textLength < maxLengthForLMode;\n  const [qrOptions] = useState({\n    width: 250,\n    height: 250,\n    data: text,\n    margin: 0,\n    // when text length is greater than max length for correct level l, use the default config\n    qrOptions: textSupportsLMode ? {\n      typeNumber: 10,\n      mode: \"Byte\",\n      errorCorrectionLevel: \"L\"\n    } : {},\n    image: \"/icons/logo-icon.svg\",\n    imageOptions: {\n      hideBackgroundDots: true,\n      imageSize: textSupportsLMode ? 0.8 : 0.3,\n      margin: 4\n    },\n    dotsOptions: {\n      type: \"classy\",\n      color: \"#fff\"\n    },\n    backgroundOptions: {\n      color: \"#6610F2\"\n    },\n    cornersDotOptions: {\n      color: \"#f2f2f2\"\n    },\n    cornersSquareOptions: {\n      type: \"extra-rounded\",\n      color: \"#fff\"\n    },\n    ...(options === null || options === void 0 ? void 0 : options.qrOptions)\n  });\n  const [qrCode] = useState(new QRCodeStyling(qrOptions));\n\n  // check if ref exist and append the qr code to the ref\n  useEffect(() => {\n    if (ref.current) {\n      qrCode.append(ref.current);\n    }\n  }, [qrCode, ref, refetch]);\n\n  // update the qr code when the qrOptions change\n  useEffect(() => {\n    // if (!qrCode) return;\n    qrCode.update(qrOptions);\n  }, [qrCode, qrOptions]);\n};\n_s(useQrCode, \"yCYRbmoxFGNeuUnS1miTwjCMNcw=\");","map":{"version":3,"names":["QRCodeStyling","useEffect","useState","useQrCode","options","_s","text","ref","refetch","textLength","length","maxLengthForLMode","textSupportsLMode","qrOptions","width","height","data","margin","typeNumber","mode","errorCorrectionLevel","image","imageOptions","hideBackgroundDots","imageSize","dotsOptions","type","color","backgroundOptions","cornersDotOptions","cornersSquareOptions","qrCode","current","append","update"],"sources":["/Users/ayodejiakinola/Documents/gandalf-gate/gandalf-data-aggregator/frontend/src/hooks/use-qr-code.ts"],"sourcesContent":["import QRCodeStyling, { type Options } from \"qr-code-styling\";\nimport { useEffect, useState } from \"react\";\n\ninterface QrCodeOptions {\n  text: string;\n  qrOptions?: Options;\n  ref: React.RefObject<HTMLDivElement>;\n  refetch?: boolean;\n}\n\nexport const useQrCode = (options: QrCodeOptions) => {\n  const { text = \"\", ref, refetch } = options;\n\n  const textLength = text.length;\n\n  const maxLengthForLMode = 271;\n\n  const textSupportsLMode = textLength < maxLengthForLMode;\n\n  const [qrOptions] = useState<Options>({\n    width: 250,\n    height: 250,\n    data: text,\n    margin: 0,\n    // when text length is greater than max length for correct level l, use the default config\n    qrOptions: textSupportsLMode\n      ? {\n          typeNumber: 10,\n          mode: \"Byte\",\n          errorCorrectionLevel: \"L\",\n        }\n      : {},\n    image: \"/icons/logo-icon.svg\",\n    imageOptions: {\n      hideBackgroundDots: true,\n      imageSize: textSupportsLMode ? 0.8 : 0.3,\n      margin: 4,\n    },\n    dotsOptions: {\n      type: \"classy\",\n      color: \"#fff\",\n    },\n    backgroundOptions: {\n      color: \"#6610F2\",\n    },\n    cornersDotOptions: {\n      color: \"#f2f2f2\",\n    },\n    cornersSquareOptions: {\n      type: \"extra-rounded\",\n      color: \"#fff\",\n    },\n    ...options?.qrOptions,\n  });\n\n  const [qrCode] = useState<QRCodeStyling>(new QRCodeStyling(qrOptions));\n\n  // check if ref exist and append the qr code to the ref\n  useEffect(() => {\n    if (ref.current) {\n      qrCode.append(ref.current);\n    }\n  }, [qrCode, ref, refetch]);\n\n  // update the qr code when the qrOptions change\n  useEffect(() => {\n    // if (!qrCode) return;\n    qrCode.update(qrOptions);\n  }, [qrCode, qrOptions]);\n};"],"mappings":";AAAA,OAAOA,aAAa,MAAwB,iBAAiB;AAC7D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAS3C,OAAO,MAAMC,SAAS,GAAIC,OAAsB,IAAK;EAAAC,EAAA;EACnD,MAAM;IAAEC,IAAI,GAAG,EAAE;IAAEC,GAAG;IAAEC;EAAQ,CAAC,GAAGJ,OAAO;EAE3C,MAAMK,UAAU,GAAGH,IAAI,CAACI,MAAM;EAE9B,MAAMC,iBAAiB,GAAG,GAAG;EAE7B,MAAMC,iBAAiB,GAAGH,UAAU,GAAGE,iBAAiB;EAExD,MAAM,CAACE,SAAS,CAAC,GAAGX,QAAQ,CAAU;IACpCY,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,IAAI,EAAEV,IAAI;IACVW,MAAM,EAAE,CAAC;IACT;IACAJ,SAAS,EAAED,iBAAiB,GACxB;MACEM,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,MAAM;MACZC,oBAAoB,EAAE;IACxB,CAAC,GACD,CAAC,CAAC;IACNC,KAAK,EAAE,sBAAsB;IAC7BC,YAAY,EAAE;MACZC,kBAAkB,EAAE,IAAI;MACxBC,SAAS,EAAEZ,iBAAiB,GAAG,GAAG,GAAG,GAAG;MACxCK,MAAM,EAAE;IACV,CAAC;IACDQ,WAAW,EAAE;MACXC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE;IACT,CAAC;IACDC,iBAAiB,EAAE;MACjBD,KAAK,EAAE;IACT,CAAC;IACDE,iBAAiB,EAAE;MACjBF,KAAK,EAAE;IACT,CAAC;IACDG,oBAAoB,EAAE;MACpBJ,IAAI,EAAE,eAAe;MACrBC,KAAK,EAAE;IACT,CAAC;IACD,IAAGvB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,SAAS;EACvB,CAAC,CAAC;EAEF,MAAM,CAACkB,MAAM,CAAC,GAAG7B,QAAQ,CAAgB,IAAIF,aAAa,CAACa,SAAS,CAAC,CAAC;;EAEtE;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIM,GAAG,CAACyB,OAAO,EAAE;MACfD,MAAM,CAACE,MAAM,CAAC1B,GAAG,CAACyB,OAAO,CAAC;IAC5B;EACF,CAAC,EAAE,CAACD,MAAM,EAAExB,GAAG,EAAEC,OAAO,CAAC,CAAC;;EAE1B;EACAP,SAAS,CAAC,MAAM;IACd;IACA8B,MAAM,CAACG,MAAM,CAACrB,SAAS,CAAC;EAC1B,CAAC,EAAE,CAACkB,MAAM,EAAElB,SAAS,CAAC,CAAC;AACzB,CAAC;AAACR,EAAA,CA3DWF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}